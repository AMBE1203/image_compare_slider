name: publish

on:
  push:
    branches:
      - main

jobs:
  pana:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: subosito/flutter-action@v2.8.0
      #- name: Check for duplicate code üïµÔ∏è
      #  uses: platisd/duplicate-code-detection-tool@v1.1.0
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    directories: "lib/src"
      #    # Only examine .ts files
      #    file_extensions: "dart"
      #    # Only report similarities above 20%
      #    ignore_below: 50
      #    # If a file is more than 99% similar to another, then the job fails
      #    # This should probably be around 70% in the future
      #    fail_above: 99
      #    # If a file is more than 20% similar to another, show a warning symbol in the report
      #    warn_above: 50
      - name: Install Dependencies üì¶
        run: |
          flutter packages get
          flutter pub global activate pana
      - name: Verify Pub Score üëå
        run: |
          PANA=$(pana . --no-warning); PANA_SCORE=$(echo $PANA | sed -n "s/.*Points: \([0-9]*\)\/\([0-9]*\)./\1\/\2/p")
          echo "score: $PANA_SCORE"
          IFS='/'; read -a SCORE_ARR <<< "$PANA_SCORE"; SCORE=SCORE_ARR[0]; TOTAL=SCORE_ARR[1]
          if (( $SCORE < $TOTAL )); then echo "minimum score not met!"; exit 1; fi

  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0
      - name: Install Flutter
        uses: subosito/flutter-action@v2.8.0
        with:
          flutter-version: "3.7.3"
          channel: "stable"
      - name: Install dependencies üì¶
        run: flutter pub get
      - name: Analyze üîç
        run: flutter analyze
      - name: Check Publish Warnings üôèüèΩ
        run: dart pub publish --dry-run
      - name: Clean example project üßπ
        run: cd example && flutter clean .

        # Pub credentials can be fount at:
        #
        # MAC: ~/Library/Application Support/dart as `pub-credentials.json`
        #
        # WINDOWS: %APPDATA%/dart/pub-credentials.json
        #
        # LINUX: $XDG_CONFIG_HOME/dart/pub-credentials.json
        #        or
        #        $HOME/.config/dart/pub-credentials.json
      - name: Publish to Pub üöÄ
        run: |
          mkdir -p $HOME/.config/dart
          cat <<EOF > $HOME/.config/dart/pub-credentials.json
          ${{ secrets.PUB_JSON }}
          EOF
          dart pub publish -f

      # TODO(carlito): Create gh release
      # - name: Create Release üì¶
      #   run: |
      #     TAG_VERSION=$(cat pubspec.yaml | grep version | cut -d " " -f 2 | tr -d '"')
      #     gh release create $TAG_VERSION -t $TAG_VERSION --generate-notes
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      # TODO(carlito): Create automated release -> https://dart.dev/tools/pub/automated-publishing
      # TODO(carlito): Add deployment to GitHub Pages